package inky.framework.validation{	import flash.events.EventDispatcher;	import inky.framework.validation.IValidator;	import inky.framework.validation.ValidationResult;	import inky.framework.validation.ValidationResultEvent;	/**	 *		 *	..	 *	 *	@langversion ActionScript 3.0	 *	@playerversion Flash 9.0	 *	 *	@author Eric Eldredge	 *	@author Matthew Tretter	 *	@since  2008.11.17	 *		 */	public class BaseValidator extends EventDispatcher implements IValidator	{		private var _pattern:RegExp;		private var _property:String;		private var _required:Boolean;		private var _source:Object;		/**		 *		 *			 */		public function BaseValidator()		{			this._init();		}		//		// accessors		//		/**		 *		 *		 *		 */		public function get pattern():RegExp		{			return this._pattern;		}		/**		 * @private		 */		public function set pattern(pattern:RegExp):void		{			this._pattern = pattern;		}		/**		 *		 *		 *		 */		public function get property():String		{			return this._property;		}		/**		 * @private		 */		public function set property(property:String):void		{			this._property = property;		}		/**		 *		 *		 *		 */		public function get required():Boolean		{			return this._required;		}		/**		 * @private		 */		public function set required(required:Boolean):void		{			this._required = required;		}		/**		 *		 *		 *		 */		public function get source():Object		{			return this._source;		}		/**		 * @private		 */		public function set source(source:Object):void		{			this._source = source;		}		//		// public methods		//		/**		 * @inheritDoc		 */		public function validate():ValidationResultEvent		{			var isError:Boolean = false;			var subField:String = this.property;			var value:Object = this.source[this.property];			var errorCode:String = '';			var errorMessage:String = '';			if (this.required)			{				isError = !this.pattern.test(this.source[this.property]);// TODO: How to use this errorCode?				errorCode = '!';				errorMessage = 'Invalid ' + this.property + ' value';			}			var result:ValidationResult = new ValidationResult(isError, subField, errorCode, errorMessage);						var type:String = isError ? ValidationResultEvent.INVALID : ValidationResultEvent.VALID;			var e:ValidationResultEvent = new ValidationResultEvent(type, false, false, subField, [result]);			this.dispatchEvent(e);			return e;		}		//		// private methods		//		/**		 *		 *			 */		private function _init():void		{			this.required = true;		}	}}