package inky.framework.forms{	import flash.display.*;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.events.HTTPStatusEvent;    import flash.events.IOErrorEvent;	import flash.text.TextField;	import inky.framework.forms.FormController;	import inky.framework.forms.FormEvent;	import inky.framework.validation.IValidator;	import inky.framework.validation.IValidatorView;	import inky.framework.validation.ValidationResultEvent;	/**	 *		 *	Wraps a FormController	 *	 *	@langversion ActionScript 3.0	 *	@playerversion Flash 9.0	 *	 *	@author Eric Eldredge	 *	@author Matthew Tretter	 *	@since  2008.11.17	 *		 */	public class Form extends MovieClip	{		private var _controller:FormController;		/**		 *		 *			 */		public function Form()		{			this._init();		}		//		// accessors		//		/**		 * @copy inky.framework.forms.FormController#action		 */		public function get action():Object		{			return this._controller.action;		}		/**		 * @private		 */		public function set action(action:Object):void		{			this._controller.action = action;		}		/**		 * @copy inky.framework.forms.FormController#method		 */		public function get method():String		{			return this._controller.method;		}		/**		 * @private		 */		public function set method(method:String):void		{			this._controller.method = method;		}		/**		 * @copy inky.framework.forms.FormController#submitButton		 */		public function get submitButton():InteractiveObject		{			return this._controller.submitButton;		}		/**		 * @private		 */		public function set submitButton(submitButton:InteractiveObject):void		{			this._controller.submitButton = submitButton;		}		//		// public methods		//		/**		 * @copy inky.framework.forms.FormController#addControl()		 */		public function addControl(control:DisplayObject, controlValueGetter:Object = null, modelOrModelId:Object = null, modelValueGetter:Object = null, submissionName:String = null, emptyValue:* = undefined):void		{			this._controller.addControl(control, controlValueGetter, modelOrModelId, modelValueGetter, submissionName, emptyValue);		}		/**		 * @copy inky.framework.forms.FormController#addValidator()		 */		public function addValidator(validator:IValidator, view:IValidatorView = null):void		{			this._controller.addValidator(validator, view);		}		/**		 * @copy inky.framework.forms.FormController#removeControl()		 */		public function removeControl(control:DisplayObject):void		{			this._controller.removeControl(control);		}		/**		 * @copy inky.framework.forms.FormController#removeValidator()		 */		public function removeValidator(validator:IValidator):void		{			this._controller.removeValidator(validator);		}		/**		 * @copy inky.framework.forms.FormController#restore()		 */		public function restore():void		{			this._controller.restore();		}		/**		 * @copy inky.framework.forms.FormController#restoreControl()		 */		public function restoreControl(control:Object, prop:String, delay:Boolean = false):void		{			this._controller.restoreControl(control, prop, delay);		}		/**		 * @copy inky.framework.forms.FormController#submit()		 */		public function submit():void		{			var e:FormEvent = new FormEvent(FormEvent.SUBMIT, false, true);			this.dispatchEvent(e);			if (!e.isDefaultPrevented())			{				this._controller.submit();			}		}		//		// private methods		//		/**		 *		 *			 */		private function _init():void		{			this._controller = new FormController();			this._controller.addEventListener(Event.COMPLETE, this._relayEvent);			this._controller.addEventListener(Event.OPEN, this._relayEvent);            this._controller.addEventListener(ProgressEvent.PROGRESS, this._relayEvent);            this._controller.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this._relayEvent);            this._controller.addEventListener(HTTPStatusEvent.HTTP_STATUS, this._relayEvent);            this._controller.addEventListener(IOErrorEvent.IO_ERROR, this._relayEvent);			for (var i:int = 0; i < this.numChildren; i++)			{				var child:DisplayObject = this.getChildAt(i);				this._initChild(child);			}		}		/**		 *		 *			 */		private function _initChild(child:DisplayObject):void		{			if (!(child is IValidatorView))			{				if (child.name == '_submitButton')				{					this.submitButton = child as InteractiveObject;				}				else				{					try					{						this.addControl(child);					}					catch(error:Error)					{						// TODO: Should this fail silently?					}				}			}		}		/**		 *		 *			 */		private function _relayEvent(e:Event):void		{			this.dispatchEvent(e);		}	}}